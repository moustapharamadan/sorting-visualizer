{"version":3,"sources":["Redux/actionTypes.js","Redux/initialState.js","Redux/reducer.js","Redux/store.js","Redux/actions.js","Algorithms/Algorithms.js","Algorithms/AlgorithmTypes.js","Visualizer/SortingVisualizer.js","Visualizer/SettingsFrame.js","Visualizer/AlgorithmInfo.js","App.js","reportWebVitals.js","index.js"],"names":["UPDATE_DATA_ARRAY","TOGGLE_PLOT_DIRECTION","UPDATE_DATA_ARRAY_SIZE","IS_SORT_RUNNING","UPDATE_ALGORITHM","dataArray","isHorizontalDirection","dataArraySize","isSortRunning","algorithm","reducer","state","initialState","action","type","types","store","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","reduxImmutableStateInvariant","configureStore","updateDataArray","toggleIsSortRunning","resetArray","size","min","max","array","i","rand","Math","floor","random","push","sleep","delay","Promise","resolve","setTimeout","merge","start","mid","end","a","tmp","j","k","dispatch","length","mergeSortInternal","parseInt","mergeSort","swap","partition","left","right","pivot","quickSortInternal","quickSort","bubbleSort","swapped","insertionSort","heapify","n","high","heapSort","console","log","name","SortingVisualizer","this","props","className","map","value","index","style","width","height","Component","mapDispatchToProps","actions","connect","SettingsFrame","role","display","margin","marginBottom","onChange","togglePlotDirection","updateAlgorithm","checked","htmlFor","id","onInput","event","updateDataArraySize","target","disabled","onClick","AlgorithmInfo","algorithmInfoArray","descirption","complexity","open","info","Collapse","in","class","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d9e5ab6.chunk.js","sourcesContent":["export const UPDATE_DATA_ARRAY = \"GENERATE_DATA_ARRAY\";\r\nexport const TOGGLE_PLOT_DIRECTION = \"TOGGLE_PLOT_DIRECTION\";\r\nexport const UPDATE_DATA_ARRAY_SIZE = \"UPDATE_DATA_ARRAY_SIZE\";\r\nexport const IS_SORT_RUNNING = \"IS_SORT_RUNNING\";\r\nexport const UPDATE_ALGORITHM = \"UPDATE_ALGORITHM\";\r\n","// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  dataArray: [],\r\n  isHorizontalDirection: true,\r\n  dataArraySize: 20,\r\n  isSortRunning: false,\r\n  algorithm: 0,\r\n};\r\n","import * as types from \"./actionTypes\";\r\nimport initialState from \"./initialState\";\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case types.UPDATE_DATA_ARRAY:\r\n      return { ...state, dataArray: action.dataArray };\r\n    case types.TOGGLE_PLOT_DIRECTION:\r\n      return { ...state, isHorizontalDirection: !state.isHorizontalDirection };\r\n    case types.UPDATE_DATA_ARRAY_SIZE:\r\n      return { ...state, dataArraySize: action.dataArraySize };\r\n    case types.IS_SORT_RUNNING:\r\n      return { ...state, isSortRunning: !state.isSortRunning };\r\n    case types.UPDATE_ALGORITHM:\r\n      return { ...state, algorithm: action.algorithm };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport reduxImmutableStateInvariant from \"redux-immutable-state-invariant\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nfunction configureStore(initialState) {\r\n  const composeEnhancers =\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n  return createStore(\r\n    reducer,\r\n    initialState,\r\n    composeEnhancers(applyMiddleware(thunk, reduxImmutableStateInvariant()))\r\n  );\r\n}\r\n\r\nexport const store = configureStore();\r\n","import * as types from \"./actionTypes\";\r\n\r\nexport function updateDataArray(dataArray) {\r\n  return { type: types.UPDATE_DATA_ARRAY, dataArray };\r\n}\r\n\r\nexport function togglePlotDirection() {\r\n  return { type: types.TOGGLE_PLOT_DIRECTION };\r\n}\r\n\r\nexport function updateDataArraySize(dataArraySize) {\r\n  return { type: types.UPDATE_DATA_ARRAY_SIZE, dataArraySize };\r\n}\r\n\r\nexport function toggleIsSortRunning() {\r\n  return { type: types.IS_SORT_RUNNING };\r\n}\r\n\r\nexport function updateAlgorithm(algorithm) {\r\n  return { type: types.UPDATE_ALGORITHM, algorithm };\r\n}\r\n","import { store } from \"../Redux/store\";\r\nimport { toggleIsSortRunning, updateDataArray } from \"../Redux/actions\";\r\nimport * as types from \"./AlgorithmTypes\";\r\n\r\nfunction getRandomInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport function resetArray(size) {\r\n  const array = [];\r\n  for (let i = 0; i < size; i++) {\r\n    const rand = getRandomInteger(1, 100);\r\n    array.push(rand);\r\n  }\r\n  return array;\r\n}\r\n\r\nconst sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay));\r\n\r\nasync function merge(array, start, mid, end) {\r\n  const tmp = [];\r\n  let i = start;\r\n  let j = mid + 1;\r\n  while (i <= mid && j <= end) {\r\n    if (array[i] < array[j]) {\r\n      tmp.push(array[i]);\r\n      i++;\r\n    } else {\r\n      tmp.push(array[j]);\r\n      j++;\r\n    }\r\n  }\r\n  while (i <= mid) {\r\n    tmp.push(array[i]);\r\n    i++;\r\n  }\r\n  while (j <= end) {\r\n    tmp.push(array[j]);\r\n    j++;\r\n  }\r\n  for (let k = start; k <= end; k++) {\r\n    array[k] = tmp[k - start];\r\n    store.dispatch(updateDataArray([...array]));\r\n    await sleep(1000 / array.length);\r\n  }\r\n  return array;\r\n}\r\n\r\nasync function mergeSortInternal(array, start, end) {\r\n  if (start < end) {\r\n    const mid = parseInt((end + start) / 2, 10);\r\n    await mergeSortInternal(array, start, mid);\r\n    await mergeSortInternal(array, mid + 1, end);\r\n    array = await merge(array, start, mid, end);\r\n  }\r\n}\r\n\r\nasync function mergeSort(array) {\r\n  await mergeSortInternal(array, 0, array.length - 1);\r\n}\r\n\r\nasync function swap(array, i, j) {\r\n  [array[i], array[j]] = [array[j], array[i]];\r\n  store.dispatch(updateDataArray([...array]));\r\n  await sleep(1000 / array.length);\r\n}\r\n\r\nasync function partition(array, left, right) {\r\n  const pivot = array[right];\r\n  let i = left - 1;\r\n  for (let j = left; j < right; j++) {\r\n    if (array[j] < pivot) {\r\n      i++;\r\n      await swap(array, i, j);\r\n    }\r\n  }\r\n  await swap(array, i + 1, right);\r\n  return i + 1;\r\n}\r\n\r\nasync function quickSortInternal(array, left, right) {\r\n  if (left < right) {\r\n    const pivot = await partition(array, left, right);\r\n    await quickSortInternal(array, left, pivot - 1);\r\n    await quickSortInternal(array, pivot + 1, right);\r\n  }\r\n}\r\n\r\nasync function quickSort(array) {\r\n  await quickSortInternal(array, 0, array.length - 1);\r\n}\r\n\r\nasync function bubbleSort(array) {\r\n  for (let i = 0; i < array.length - 1; ++i) {\r\n    let swapped = false;\r\n    for (let j = 0; j < array.length - i - 1; ++j) {\r\n      if (array[j] > array[j + 1]) {\r\n        await swap(array, j, j + 1);\r\n        swapped = true;\r\n      }\r\n    }\r\n    if (!swapped) break;\r\n  }\r\n}\r\n\r\nasync function insertionSort(array) {\r\n  for (let i = 1; i < array.length; ++i) {\r\n    for (let j = i; j > 0; --j) {\r\n      if (array[j] < array[j - 1]) {\r\n        await swap(array, j, j - 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nasync function heapify(array, n, i) {\r\n  const left = 2 * i + 1;\r\n  const right = 2 * i + 2;\r\n  let high = i;\r\n  if (left < n && array[left] > array[high]) high = left;\r\n  if (right < n && array[right] > array[high]) high = right;\r\n  if (i !== high) {\r\n    await swap(array, i, high);\r\n    await heapify(array, n, high);\r\n  }\r\n}\r\n\r\nasync function heapSort(array) {\r\n  for (let i = array.length / 2 - 1; i >= 0; --i) {\r\n    await heapify(array, array.length, i);\r\n  }\r\n  console.log(array);\r\n  for (let i = array.length - 1; i > 0; --i) {\r\n    await swap(array, i, 0);\r\n    await heapify(array, i, 0);\r\n  }\r\n}\r\n\r\nexport async function algorithm(array, name) {\r\n  store.dispatch(toggleIsSortRunning());\r\n  switch (name) {\r\n    case types.BUBBLE_SORT:\r\n      await bubbleSort(array);\r\n      break;\r\n    case types.HEAP_SORT:\r\n      await heapSort(array);\r\n      break;\r\n    case types.INSERTION_SORT:\r\n      await insertionSort(array);\r\n      break;\r\n    case types.MERGE_SORT:\r\n      await mergeSort(array);\r\n      break;\r\n    case types.QUICK_SORT:\r\n      await quickSort(array);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  store.dispatch(toggleIsSortRunning());\r\n}\r\n","export const NAN = 0;\r\nexport const BUBBLE_SORT = 1;\r\nexport const HEAP_SORT = 2;\r\nexport const INSERTION_SORT = 3;\r\nexport const MERGE_SORT = 4;\r\nexport const QUICK_SORT = 5;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as actions from \"../Redux/actions\";\r\nimport { resetArray } from \"../Algorithms/Algorithms\";\r\nimport \"./styles.css\";\r\nexport class SortingVisualizer extends Component {\r\n  componentDidMount() {\r\n    this.props.updateDataArray(resetArray(this.props.dataArraySize));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.updateDataArray([]);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sort-container\">\r\n        {this.props.isHorizontalDirection\r\n          ? this.props.dataArray.map((value, index) => (\r\n              <div\r\n                className=\"horizontal-bar\"\r\n                key={index}\r\n                style={{\r\n                  width: value + \"%\",\r\n                  height: 100 / this.props.dataArraySize + \"%\",\r\n                }}\r\n              ></div>\r\n            ))\r\n          : this.props.dataArray.map((value, index) => (\r\n              <div\r\n                className=\"vertical-bar\"\r\n                key={index}\r\n                style={{\r\n                  width: 100 / this.props.dataArraySize + \"%\",\r\n                  height: value + \"%\",\r\n                }}\r\n              ></div>\r\n            ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSortingVisualizer.propTypes = {\r\n  dataArray: PropTypes.array.isRequired,\r\n  dataArraySize: PropTypes.number.isRequired,\r\n  isHorizontalDirection: PropTypes.bool.isRequired,\r\n  updateDataArray: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dataArray: state.dataArray,\r\n    isHorizontalDirection: state.isHorizontalDirection,\r\n    dataArraySize: state.dataArraySize,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  updateDataArray: actions.updateDataArray,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SortingVisualizer);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as actions from \"../Redux/actions\";\r\nimport { resetArray, algorithm } from \"../Algorithms/Algorithms\";\r\nimport * as algorithmTypes from \"../Algorithms/AlgorithmTypes\";\r\nimport Switch from \"react-switch\";\r\n\r\nclass SettingsFrame extends Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"btn-group\"\r\n        role=\"group\"\r\n        aria-label=\"Basic example\"\r\n        style={{\r\n          display: \"flex\",\r\n          margin: \"0 5%\",\r\n          marginBottom: \"0.5%\",\r\n        }}\r\n      >\r\n        <label>\r\n          <span>Horizontal Array</span>\r\n          <Switch\r\n            onChange={() => {\r\n              this.props.togglePlotDirection();\r\n              this.props.updateAlgorithm(algorithmTypes.NAN);\r\n            }}\r\n            checked={this.props.isHorizontalDirection}\r\n            className=\"react-switch\"\r\n          />\r\n        </label>\r\n        <div\r\n          style={{\r\n            margin: \"0 10px\",\r\n          }}\r\n        >\r\n          <label htmlFor=\"formControlRange\">Number of Elements</label>\r\n          <input\r\n            type=\"range\"\r\n            className=\"form-control-range\"\r\n            id=\"formControlRange\"\r\n            min=\"5\"\r\n            max=\"1000\"\r\n            onInput={(event) => {\r\n              this.props.updateDataArraySize(parseInt(event.target.value));\r\n              this.props.updateDataArray(\r\n                resetArray(parseInt(event.target.value))\r\n              );\r\n              this.props.updateAlgorithm(algorithmTypes.NAN);\r\n            }}\r\n            disabled={this.props.isSortRunning}\r\n          />\r\n          <span id=\"rangeval\">{this.props.dataArraySize}</span>\r\n        </div>\r\n        <button\r\n          className=\"btn btn-outline-primary\"\r\n          type=\"submit\"\r\n          onClick={() => {\r\n            this.props.updateAlgorithm(algorithmTypes.NAN);\r\n            this.props.updateDataArray(resetArray(this.props.dataArraySize));\r\n          }}\r\n          disabled={this.props.isSortRunning}\r\n        >\r\n          Generate New Array\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-primary\"\r\n          type=\"submit\"\r\n          onClick={() => {\r\n            this.props.updateAlgorithm(algorithmTypes.MERGE_SORT);\r\n          }}\r\n          disabled={this.props.isSortRunning}\r\n        >\r\n          Merge Sort\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-primary\"\r\n          type=\"submit\"\r\n          onClick={() => {\r\n            this.props.updateAlgorithm(algorithmTypes.QUICK_SORT);\r\n          }}\r\n          disabled={this.props.isSortRunning}\r\n        >\r\n          Quick Sort\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-primary\"\r\n          type=\"submit\"\r\n          onClick={() => {\r\n            this.props.updateAlgorithm(algorithmTypes.HEAP_SORT);\r\n          }}\r\n          disabled={this.props.isSortRunning}\r\n        >\r\n          Heap Sort\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-primary\"\r\n          type=\"submit\"\r\n          onClick={() => {\r\n            this.props.updateAlgorithm(algorithmTypes.INSERTION_SORT);\r\n          }}\r\n          disabled={this.props.isSortRunning}\r\n        >\r\n          Insertion Sort\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-primary\"\r\n          type=\"submit\"\r\n          onClick={() => {\r\n            this.props.updateAlgorithm(algorithmTypes.BUBBLE_SORT);\r\n          }}\r\n          disabled={this.props.isSortRunning}\r\n        >\r\n          Bubble Sort\r\n        </button>\r\n        <button\r\n          className=\"btn btn-outline-primary\"\r\n          type=\"submit\"\r\n          onClick={() => {\r\n            const array = [...this.props.dataArray];\r\n            algorithm(array, this.props.algorithm);\r\n            this.props.updateAlgorithm(algorithmTypes.NAN);\r\n          }}\r\n          disabled={this.props.isSortRunning || this.props.algorithm === 0}\r\n        >\r\n          Start\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSettingsFrame.propTypes = {\r\n  dataArray: PropTypes.array.isRequired,\r\n  dataArraySize: PropTypes.number.isRequired,\r\n  isHorizontalDirection: PropTypes.bool.isRequired,\r\n  isSortRunning: PropTypes.bool.isRequired,\r\n  updateDataArray: PropTypes.func.isRequired,\r\n  togglePlotDirection: PropTypes.func.isRequired,\r\n  updateAlgorithm: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dataArray: state.dataArray,\r\n    dataArraySize: state.dataArraySize,\r\n    isHorizontalDirection: state.isHorizontalDirection,\r\n    isSortRunning: state.isSortRunning,\r\n    algorithm: state.algorithm,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  updateDataArray: actions.updateDataArray,\r\n  updateDataArraySize: actions.updateDataArraySize,\r\n  togglePlotDirection: actions.togglePlotDirection,\r\n  updateAlgorithm: actions.updateAlgorithm,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsFrame);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\n\r\nclass AlgorithmInfo extends Component {\r\n  algorithmInfoArray = [\r\n    { name: \"\", descirption: \"\", complexity: \"\" },\r\n    {\r\n      name: \"Bubble Sort\",\r\n      descirption:\r\n        \"Bubble sort performs sorting by checking the neighboring data elements and swapping them if they are in wrong order\",\r\n      complexity: \"O(n²)\",\r\n    },\r\n    {\r\n      name: \"Heap Sort\",\r\n      descirption:\r\n        \"Merge Sort is a Divide and Conquer algorithm. It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves\",\r\n      complexity: \"O(n*Log n)\",\r\n    },\r\n    {\r\n      name: \"Insertion Sort\",\r\n      descirption:\r\n        \"Insertion sort performs sorting by transferring one element to a partially sorted array at a time\",\r\n      complexity: \"O(n²)\",\r\n    },\r\n    {\r\n      name: \"Merge Sort\",\r\n      descirption:\r\n        \"Merge Sort is a divide-and-conquer algorithm. It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves\",\r\n      complexity: \"O(n*Log n)\",\r\n    },\r\n    {\r\n      name: \"Quick Sort\",\r\n      descirption:\r\n        \"Quicksort is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot\",\r\n      complexity: \"O(n*Log n)\",\r\n    },\r\n  ];\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { open: false };\r\n  }\r\n\r\n  render() {\r\n    const info = this.algorithmInfoArray[this.props.algorithm];\r\n    const open = this.props.algorithm !== 0;\r\n    return (\r\n      <div style={{ width: \"90%\", margin: \"auto\", marginBottom: \"0.5%\" }}>\r\n        <Collapse in={open}>\r\n          <div id=\"collapse-text\" class=\"card card-body\">\r\n            {info.descirption}\r\n          </div>\r\n        </Collapse>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAlgorithmInfo.propTypes = {\r\n  algorithm: PropTypes.number.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    algorithm: state.algorithm,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(AlgorithmInfo);\r\n","import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { store } from \"./Redux/store\";\nimport { Provider } from \"react-redux\";\nimport SortingVisualizer from \"./Visualizer/SortingVisualizer\";\nimport SettingsFrame from \"./Visualizer/SettingsFrame\";\nimport AlgorithmInfo from \"./Visualizer/AlgorithmInfo\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <SettingsFrame />\n      <AlgorithmInfo />\n      <SortingVisualizer />\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}